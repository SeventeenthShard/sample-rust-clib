/* automatically generated by rust-bindgen 0.64.0 */

pub type MyLibHandle = *mut ::std::os::raw::c_void;
pub type MyLibStatus = i64;
pub type MYLIB_INT = i64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MyLibSettings {
    pub entries_num: usize,
    pub keys: *mut *const ::std::os::raw::c_char,
    pub values: *mut *const ::std::os::raw::c_char,
    pub reserved: [u8; 64usize],
}
#[test]
fn bindgen_test_layout_MyLibSettings() {
    const UNINIT: ::std::mem::MaybeUninit<MyLibSettings> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MyLibSettings>(),
        88usize,
        concat!("Size of: ", stringify!(MyLibSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<MyLibSettings>(),
        8usize,
        concat!("Alignment of ", stringify!(MyLibSettings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entries_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MyLibSettings),
            "::",
            stringify!(entries_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keys) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MyLibSettings),
            "::",
            stringify!(keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MyLibSettings),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MyLibSettings),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MyLibLibraryInfo {
    pub api_version_major: MYLIB_INT,
    pub api_version_minor: MYLIB_INT,
    pub api_version_point: MYLIB_INT,
    pub library_name: *const ::std::os::raw::c_char,
    pub library_version: *const ::std::os::raw::c_char,
    pub library_description: *const ::std::os::raw::c_char,
    pub reserved: [u8; 64usize],
}
#[test]
fn bindgen_test_layout_MyLibLibraryInfo() {
    const UNINIT: ::std::mem::MaybeUninit<MyLibLibraryInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MyLibLibraryInfo>(),
        112usize,
        concat!("Size of: ", stringify!(MyLibLibraryInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<MyLibLibraryInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(MyLibLibraryInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_version_major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MyLibLibraryInfo),
            "::",
            stringify!(api_version_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_version_minor) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MyLibLibraryInfo),
            "::",
            stringify!(api_version_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_version_point) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MyLibLibraryInfo),
            "::",
            stringify!(api_version_point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).library_name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MyLibLibraryInfo),
            "::",
            stringify!(library_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).library_version) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MyLibLibraryInfo),
            "::",
            stringify!(library_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).library_description) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MyLibLibraryInfo),
            "::",
            stringify!(library_description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(MyLibLibraryInfo),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MyLibSession {
    pub opaque_handle: MyLibHandle,
    pub reserved: [u8; 64usize],
}
#[test]
fn bindgen_test_layout_MyLibSession() {
    const UNINIT: ::std::mem::MaybeUninit<MyLibSession> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MyLibSession>(),
        72usize,
        concat!("Size of: ", stringify!(MyLibSession))
    );
    assert_eq!(
        ::std::mem::align_of::<MyLibSession>(),
        8usize,
        concat!("Alignment of ", stringify!(MyLibSession))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opaque_handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MyLibSession),
            "::",
            stringify!(opaque_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MyLibSession),
            "::",
            stringify!(reserved)
        )
    );
}
extern "C" {
    pub fn MyLibInitialize(library_settings: *const MyLibSettings) -> MyLibStatus;
}
extern "C" {
    pub fn MyLibFinalize() -> MyLibStatus;
}
extern "C" {
    pub fn MyLibGetLibraryInfo(out_library_info: *mut MyLibLibraryInfo) -> MyLibStatus;
}
extern "C" {
    pub fn MyLibGetLastErrorStr() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn MyLibAcquireSession(
        session_settings: *const MyLibSettings,
        out_session: *mut MyLibSession,
    ) -> MyLibStatus;
}
extern "C" {
    pub fn MyLibReleaseSession(out_session: *mut MyLibSession) -> MyLibStatus;
}
